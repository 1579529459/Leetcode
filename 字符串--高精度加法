415. 字符串相加
给定两个字符串形式的非负整数 num1 和num2 ，计算它们的和并同样以字符串形式返回。

你不能使用任何內建的用于处理大整数的库（比如 BigInteger）， 也不能直接将输入的字符串转换为整数形式。

 

示例 1：

输入：num1 = "11", num2 = "123"
输出："134"
示例 2：

输入：num1 = "456", num2 = "77"
输出："533"
示例 3：

输入：num1 = "0", num2 = "0"
输出："0"
 

 

提示：

1 <= num1.length, num2.length <= 104
num1 和num2 都只包含数字 0-9
num1 和num2 都不包含任何前导零

===============================================================================================================================================================
===============================================================================================================================================================
===========================================================================================================================================================================


char* addStrings(char* num1, char* num2) {
    int i = strlen(num1) - 1, j = strlen(num2) - 1, add = 0;
    char* ans = (char*)malloc(sizeof(char) * (fmax(i, j) + 3));
    int len = 0;
    while (i >= 0 || j >= 0 || add != 0) {//妙阿！！！省去多余的while归并 和 x不为0 的进位   beautiful;
        int x = i >= 0 ? num1[i] - '0' : 0;//妙阿这里 i，or j <0 了 则代表加完了，用0顶上去  +0 = 没加！！（--补零处理）
        int y = j >= 0 ? num2[j] - '0' : 0;
        int result = x + y + add;
        ans[len++] = '0' + result % 10;
        add = result / 10;
        i--, j--;
    }
    // 计算完以后的答案需要翻转过来 (题解直接从后(低位)往前算了，只不过存入ans的是地位到高位，最后翻一下就好，就不用先翻一下，再翻回来了  nb666 我好傻)   翻<->Reverse
    for (int i = 0; i < len/2; i++) {
        int t = ans[i];
        ans[i] = ans[len - i - 1], ans[len - i - 1] = t;
    }
    ans[len++] = 0;//补‘\n’
    return ans;
}
